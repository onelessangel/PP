#lang racket

(require (lib "trace.ss"))

(provide (all-defined-out))

;; Același arbore de TPP obținut în etapa 1 prin aplicarea
;; transformărilor T1, T2, T3 poate fi generat folosind 
;; tupluri GH (Gopal-Hemachandra).
;;
;; Pentru o pereche oarecare (g, e), secvența GH este:
;;    g, e, g + e, g + 2e, 2g + 3e, 3g + 5e ...
;; Pentru (g, e) = (1, 1) obținem șirul lui Fibonacci.
;;
;; Primele 4 numere din secvență formează cvartetul GH:
;;    (g, e, f, h) = (g, e, g + e, g + 2e)
;;
;; Pentru un asemenea cvartet (g, e, f, h), definim:
;;    a = gh,   b = 2ef,   c = e^2 + f^2
;; și putem demonstra că (a,b,c) este un triplet pitagoreic.
;;
;; (a,b,c) este chiar TPP, dacă adăugăm condițiile:
;;    g, e, f, h prime între ele
;;    g impar
;; însă nu veți avea nevoie să faceți asemenea verificări,
;; întrucât avem la dispoziție un algoritm care generează
;; exclusiv TPP.
;;
;; Acest algoritm este foarte asemănător cu cel din etapa
;; anterioară, cu următoarele diferențe:
;;  - nodurile din arbore sunt cvartete, nu triplete
;;    (din cvartet obținem un TPP conform formulelor)
;;    (ex: (1,1,2,3) => (1*3,2*1*2,1^2+2^2) = (3,4,5))
;;  - obținem următoarea generație de cvartete folosind 
;;    trei transformări Q1, Q2, Q3 pentru cvartete, în loc
;;    de T1, T2, T3 care lucrau cu triplet
;; 
;; Q1(g,e,f,h) = (h,e,h+e,h+2e)
;; Q2(g,e,f,h) = (h,f,h+f,h+2f) 
;; Q3(g,e,f,h) = (g,f,g+f,g+2f)
;;
;; Arborele rezultat arată astfel:
;;
;;                        (1,1,2,3)
;;              ______________|______________
;;             |              |              |
;;         (3,1,4,5)      (3,2,5,7)      (1,2,3,5)
;;       ______|______  ______|______  ______|______
;;      |      |      ||      |      ||      |      |
;;  (5,1,6,7) .........................................

;; Definim funcțiile Q1, Q2, Q3:
(define (Q1 g e f h) (list h e (+ h e) (+ h e e)))
(define (Q2 g e f h) (list h f (+ h f) (+ h f f)))
(define (Q3 g e f h) (list g f (+ g f) (+ g f f)))

;; Vom refolosi matricile T1, T2, T3:
(define T1 '((-1 2 2) (-2 1 2) (-2 2 3)))
(define T2 '( (1 2 2)  (2 1 2)  (2 2 3)))
(define T3 '((1 -2 2) (2 -1 2) (2 -2 3)))


; TODO 1
; Reimplementați funcția care calculează produsul scalar
; a doi vectori X și Y, astfel încât să nu folosiți
; recursivitate explicită (ci funcționale).
; Memento:
; Se garantează că X și Y au aceeași lungime.
; Ex: (-1,2,2)·(3,4,5) = -3 + 8 + 10 = 15

(define (dot-product X Y)
  (foldr + 0 (map * X Y)))


; TODO 2
; Reimplementați funcția care calculează produsul dintre
; o matrice M și un vector V, astfel încât să nu folosiți
; recursivitate explicită (ci funcționale).
; Memento:
; Se garantează că M și V au dimensiuni compatibile.
; Ex: |-1 2 2| |3|   |15|
;     |-2 1 2|·|4| = | 8|
;     |-2 2 3| |5|   |17|

(define (multiply M V)
  (map ((curry dot-product) V) M))


; TODO
; Aduceți aici (nu sunt necesare modificări) implementarea
; funcției get-transformations de la etapa 1.
; Această funcție nu este re-punctată de checker, însă este
; necesară implementărilor ulterioare.
;; Gaseste randul pe care se afla n si ult element de pe acel rand.
;; @return: perechea (row-index . last-element)

(define (get-lvl-helper n row-index last-elem)
  (if (<= n last-elem)
      (cons row-index last-elem)
      (get-lvl-helper n (add1 row-index) (+ (expt 3 (add1 row-index)) last-elem))))

;; functie WRAPPER
(define (get-lvl n)
  (get-lvl-helper n 0 1))



;; Calculeaza primul element de pe randul unde se afla n.
;; @return: valoarea primului element
(define (get-first-elem-helper lvl-pair)
  (add1 (- (cdr lvl-pair) (expt 3 (car lvl-pair)))))  ; last-elem - 3 ^ row-index + 1

;; functie WRAPPER
;; Ne folosim de perechea (row-index . last-elem), rezultate din apelul functiei (get-lvl n).
(define (get-first-elem n)
  (get-first-elem-helper (get-lvl n)))




;; Determina marginea din stanga a intervalului.
;; @interval-no: numarul intervalului - {1, 2, 3}
;; @first: elementul de inceput al randului
;; @step: cate elemente sunt intr-un interval
;; @return: marginea din stanga a intervalului
(define (interval-left-margin interval-no first step n)
  (+ first (* (sub1 interval-no) step)))  ; first + (interval-no - 1) * step

;; Determina marginea din dreapta a intervalului.
;; @interval-no: numarul intervalului - {1, 2, 3}
;; @first: elementul de inceput al randului
;; @step: cate elemente sunt intr-un interval
;; @return: marginea din dreapta a intervalului
(define (interval-right-margin interval-no first step n)
  (sub1 (+ (interval-left-margin interval-no first step n) step)))

;; Determina daca n apartine intervalului.
;; @interval-no: numarul intervalului - {1, 2, 3}
;; @first: elementul de inceput al randului
;; @step: cate elemente sunt intr-un interval
;; @return:  daca n apartine intervalului - {#t, #f}
(define (contains-in-interval interval-no first step n)
  (and (>= n (interval-left-margin interval-no first step n))
       (<= n (interval-right-margin interval-no first step n))))



;; Afla care sunt transformarile aplicate, in ordine inversata.
;; @row: randul pe care ne aflam
;; @first: primul element de pe rand
;; @acc: acumulator, vector de transformari aplicate

;; (/ (expt 3 row) 3) = 3 ^ row / 3 -> step-ul randului, cat inseamna o treime din rand
(define (get-transformations-helper row first n acc)
  (cond
    ((zero? row) acc) ; se opreste cand ajungem la tripletul (3,4,5), pe randul 0
    ((contains-in-interval 1 first (/ (expt 3 row) 3) n) ; daca n este in prima treime
     (get-transformations-helper (sub1 row) (interval-left-margin 1 first (/ (expt 3 row) 3) n) n (cons 1 acc))) ; se adauga 1 la rezultat si se apeleaza recursiv
    ((contains-in-interval 2 first (/ (expt 3 row) 3) n) ; daca n este in a doua treime
     (get-transformations-helper (sub1 row) (interval-left-margin 2 first (/ (expt 3 row) 3) n) n (cons 2 acc))) ; se adauga 2 la rezultat si se apeleaza recursiv
    ((contains-in-interval 3 first (/ (expt 3 row) 3) n) ; daca n este in a treia treime
     (get-transformations-helper (sub1 row) (interval-left-margin 3 first (/ (expt 3 row) 3) n) n (cons 3 acc))))) ; se adauga 3 la rezultat si se apeleaza recursiv
  
;; functie WRAPPER
(define (get-transformations n)
  (reverse (get-transformations-helper (car (get-lvl n)) (get-first-elem n) n null)))


; TODO 3
; În etapa anterioară ați implementat o funcție care primea
; o listă Ts de tipul celei întoarsă de get-transformations
; și un triplet de start ppt și întorcea tripletul rezultat
; în urma aplicării transformărilor din Ts asupra ppt.
; Acum dorim să generalizăm acest proces, astfel încât să
; putem reutiliza funcția atât pentru transformările de tip
; T1, T2, T3, cât și pentru cele de tip Q1, Q2, Q3.
; În acest scop operăm următoarele modificări:
;  - primul parametru este o listă de funcții Fs
;    (în loc de o listă numerică Ts)
;  - al doilea parametru reprezintă un tuplu oarecare
;    (aici modificarea este doar "cu numele", fără a schimba
;    funcționalitatea, este responsabilitatea funcțiilor din
;    Fs să primească parametri de tipul lui tuple)
; Nu folosiți recursivitate explicită (ci funcționale).

(define (apply-functional-transformations Fs tuple)
  (foldl
   (λ (f acc)
     (f acc))
   tuple
   Fs))


; TODO
; Tot în spiritul abstractizării, veți defini o nouă funcție
; get-nth-tuple, care calculează al n-lea tuplu din arbore. 
; Această funcție va putea fi folosită:
;  - și pentru arborele de triplete (caz în care plecăm de la
;    (3,4,5) și avansăm via T1, T2, T3)
;  - și pentru arborele de cvartete (caz în care plecăm de la
;    (1,1,2,3) și avansăm via Q1, Q2, Q3)
; Rezultă că, în afară de parametrul n, funcția va trebui să
; primească un tuplu de start și 3 funcții de transformare a
; tuplurilor.
; Definiți get-nth-tuple astfel încât să o puteți reutiliza
; cu minim de efort pentru a defini funcțiile următoare:
;    get-nth-ppt-from-matrix-transformations
;    get-nth-quadruple
; (Hint: funcții curry)
; În define-ul de mai jos nu am precizat parametrii funcției
; get-nth-tuple pentru ca voi înșivă să decideți care este
; modul optim în care funcția să își primească parametrii.
; Din acest motiv checker-ul nu testează separat această funcție,
; dar asistentul va observa dacă implementarea respectă cerința.

;@n:     al n-ulea tuplu care trebuie gasit
;@tuple: tuplul de pornire
;@Fs:    lista cu cele 3 tipuri de transformari

; creeaza o lista de transformari ce trebuie aplicate consecutiv
; tuplului
; se foloseste de lista de transformari data de get-transformations
; pentru a selecta, in functie de index, transformarea potrivita din Fs

(define (get-nth-tuple tuple Fs)
  (λ (n)
    (apply-functional-transformations
     (map (λ (x) (list-ref Fs (sub1 x))) (get-transformations n))
     tuple)))


; TODO 4
; Din get-nth-tuple, obțineți în cel mai succint mod posibil
; (hint: aplicare parțială) o funcție care calculează al n-lea
; TPP din arbore, folosind transformările pe triplete.
(define trans-T (list ((curry multiply) T1) ((curry multiply) T2) ((curry multiply) T3)))

(define get-nth-ppt-from-matrix-transformations
    ((get-nth-tuple '(3 4 5) trans-T) n)))


; TODO 5
; Din get-nth-tuple, obțineți în cel mai succint mod posibil 
; (hint: aplicare parțială) o funcție care calculează al n-lea 
; cvartet din arbore, folosind transformările pe cvartete.
(define (transform Q L)
  (apply Q L)) 

(define trans-Q (list ((curry transform) Q1) ((curry transform) Q2) ((curry transform) Q3)))

(define get-nth-quadruple
    (get-nth-tuple '(1 1 2 3) trans-Q))


; TODO 6
; Folosiți rezultatul întors de get-nth-quadruple pentru a 
; obține al n-lea TPP din arbore.

;; Q(g,e,f,h) = (g*h,2*e*f,e^2+f^2)
(define (Q-TPP g e f h) (list (* g h) (* 2 (* e f)) (+ (expt e 2) (expt f 2))))

(define get-nth-ppt-from-GH-quadruples
  (λ (n)
    (apply Q-TPP (get-nth-quadruple n))))
